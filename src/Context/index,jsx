import { useContext, createContext, useState, useEffect } from "react";
import axios from 'axios';

const StateContext = createContext(undefined);

export const StateContextProvider = ({ children }) => {
    const [weather, setWeather] = useState({});
    const [values, setValues] = useState([]);
    const [place, setPlace] = useState('Jaipur');
    const [thisLocation, setLocation] = useState('');

    // Fetch weather data from the API
    const fetchWeather = async () => {
        const forecastApiKey = '044dc32dae5bad14fd2034fe6bb5047a';
        const forecastBaseUrl = 'https://api.openweathermap.org/data/2.5/weather';

        const options = {
            method: 'GET',
            url: forecastBaseUrl,
            params: {
                q: place,
                appid: forecastApiKey,
                units: 'metric',
            },
        };

        try {
            const response = await axios.request(options);
            console.log(response.data);
            const thisData = response.data; // Assuming the response contains necessary data directly
            setLocation(thisData.name); // Assuming location data is directly accessible in the response
            setValues(thisData.values); // Assuming values data is directly accessible in the response
            setWeather(thisData); // Setting weather data directly from the response
        } catch (e) {
            console.error(e);
            alert('Failed to fetch weather data.');
        }
    };

    useEffect(() => {
        fetchWeather(); // Fetch weather data when place changes
    }, [place]);

    useEffect(() => {
        console.log(values);
    }, [values]);

    return (
        <StateContext.Provider value={{
            weather:weather,
            setPlace:setPlace,
            values: values,
            thisLocation: thisLocation,
        }}>
            {children}
        </StateContext.Provider>
    );
};

export const useStateContext = () => useContext(StateContext);
